generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

// Common types

model User {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  password String
  role     String
  image    String?

  institutionApplication ApplicationForm?
  wallets                Wallets[]
  studentCredentials     StudentCredentials[]
  sharedLinks            SharedLink[]
}

model Wallets {
  walletID  String   @id @unique
  userId    String
  createdAt DateTime @default(now())

  owner User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentCredentials {
  id              String    @id @unique @default(cuid())
  credential_type String?
  credential_link String?
  issuer_address  String?
  transaction_id  String?
  issue_date      DateTime?
  verified        Boolean?
  pending         Boolean?
  userId          String

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkEntries LinkEntry[]
}

// Pending Institution types

model ApplicationForm {
  id                 String @id @default(cuid())
  institutionName    String
  institutionAddress String
  licenseNumber      String
  email              String
  phoneNumber        String
  userId             String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Student types

model SharedLink {
  id       String   @id @default(cuid())
  linkName String   @unique
  active   Boolean?
  userId   String

  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentCredentials LinkEntry[]
}

model LinkEntry {
  id                  String @id @default(cuid())
  sharedLinkId        String
  studentCredentialId String

  sharedLink        SharedLink         @relation(fields: [sharedLinkId], references: [id], onDelete: Cascade)
  studentCredential StudentCredentials @relation(fields: [studentCredentialId], references: [id], onDelete: Cascade)
}

// Rejected Institution types

model RejectedInstitution {
  id                 String @id @default(cuid())
  institutionName    String
  email              String
}