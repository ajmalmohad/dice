generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          String?
  pending       Boolean?

  accounts               Account[]
  sessions               Session[]
  institutionApplication ApplicationForm?
  wallets                Wallets[]
  studentCredentials     StudentCredentials[]
  sharedLinks            SharedLink[]
}

model ApplicationForm {
  id                 String @id @default(cuid())
  institutionName    String
  institutionAddress String
  licenseNumber      String
  email              String
  phoneNumber        String
  userId             String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wallets {
  walletID String  @id @unique
  userId   String?

  owner User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentCredentials {
  id              String    @id @unique @default(cuid())
  credential_link String?
  credential_type String?
  issuer_address  String?
  transaction_id  String?
  issue_date      DateTime?
  verified        Boolean?
  pending         Boolean?
  userId          String

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkEntries LinkEntry[]
}

model SharedLink {
  id     String   @id @default(cuid())
  active Boolean?
  userId String

  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentCredentials LinkEntry[]
}

model LinkEntry {
  id                  String @id @default(cuid())
  sharedLinkId        String
  studentCredentialId String

  sharedLink        SharedLink         @relation(fields: [sharedLinkId], references: [id], onDelete: Cascade)
  studentCredential StudentCredentials @relation(fields: [studentCredentialId], references: [id], onDelete: Cascade)
}
