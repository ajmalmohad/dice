generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

// Common types

model User {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  password String
  role     String
  image    String?

  institutionApplication ApplicationForm?
  wallets                Wallets[]
  sharedLinks            SharedLink[]
  studentCredentials     StudentCredentials[]  @relation("Owner")
  issuedCredentials      StudentCredentials[]  @relation("Issuer")
  rejectedCredentials    RejectedCredentials[] @relation("Owner")
  revokedCredentials     RejectedCredentials[] @relation("Issuer")
}

model Wallets {
  walletID  String   @id @unique
  userId    String
  createdAt DateTime @default(now())

  owner User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentCredentials {
  id             String   @id @unique @default(cuid())
  credentialType String
  credentialLink String
  issuerWallet   String
  transactionId  String
  issueDate      DateTime @default(now())
  verified       Boolean?
  pending        Boolean
  userId         String
  issuerId       String

  owner       User        @relation("Owner", fields: [userId], references: [id], onDelete: Cascade)
  issuer      User        @relation("Issuer", fields: [issuerId], references: [id])
  linkEntries LinkEntry[]
}

// Pending Institution types

model ApplicationForm {
  id                 String @id @default(cuid())
  institutionName    String
  institutionAddress String
  licenseNumber      String
  email              String
  phoneNumber        String
  userId             String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Student types

model SharedLink {
  id       String  @id @default(cuid())
  linkName String
  active   Boolean
  userId   String

  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentCredentials LinkEntry[]
}

model LinkEntry {
  id                  String @id @default(cuid())
  sharedLinkId        String
  studentCredentialId String

  sharedLink        SharedLink         @relation(fields: [sharedLinkId], references: [id], onDelete: Cascade)
  studentCredential StudentCredentials @relation(fields: [studentCredentialId], references: [id], onDelete: Cascade)
}

// Rejected types

model RejectedInstitution {
  id              String @id @default(cuid())
  institutionName String
  email           String
}

model RejectedCredentials {
  id             String   @id @default(cuid())
  credentialType String
  credentialLink String
  issuerWallet   String
  transactionId  String
  issueDate      DateTime @default(now())
  verified       Boolean?
  userId         String
  issuerId       String

  owner  User @relation("Owner", fields: [userId], references: [id], onDelete: Cascade)
  issuer User @relation("Issuer", fields: [issuerId], references: [id])
}
